name: Build
description: Build the project
inputs:
  build-type:
    description: The type of build to perform (release or debug)
    required: true
    default: "release"
  pkg-config-sysroot:
    description: The sysroot to use for pkg-config
    required: true
  target:
    description: The target to build for
    required: true
    default: x86_64-unknown-linux-gnu
  target-dir:
    description: The directory to build the project in
    required: true
    default: ""

runs:
  using: "composite"

  steps:
    - name: Cache
      id: cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key:
          build-cargo-${{ runner.os }}-${{ inputs.target }}-${{
          inputs.build-type }}-${{ hashFiles('**/Cargo.lock','**/*.rs') }}
        restore-keys: |
          build-cargo-${{ runner.os }}-${{ inputs.target }}-${{ inputs.build-type }}-
          build-cargo-${{ runner.os }}-${{ inputs.target }}-
          build-cargo-${{ runner.os }}-

    - name: Set Rust toolchain up
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions-rust-lang/setup-rust-toolchain@1fbea72663f6d4c03efaab13560c8a24cfd2a7cc # v1.9.0
      with:
        components: rustfmt
        target: ${{ inputs.target }}

    - name: Install cross toolchain
      if:
        inputs.target == 'aarch64-unknown-linux-gnu' &&
        steps.cache.outputs.cache-hit != 'true'
      shell: sh
      run: |
        # Set up apt sources for arm64

        # Get arm64 from ports.ubuntu.com
        cat <<EOF | sudo tee /etc/apt/sources.list.d/arm64.sources
        Types: deb
        URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
        Suites: noble noble-updates noble-backports noble-security
        Components: main universe restricted multiverse
        Architectures: arm64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
        EOF

        # And we need to edit the main sources.list so we don't try to get
        # amd64 from archive.ubuntu.com
        sudo sed -i '/^Components:/a Architectures: amd64' /etc/apt/sources.list.d/ubuntu.sources

        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          libssl-dev:arm64

        mkdir .cargo

        cat <<EOF > .cargo/config.toml
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        EOF

    - name: Build
      if: steps.cache.outputs.cache-hit != 'true'
      shell: sh
      env:
        PKG_CONFIG_SYSROOT_DIR: ${{ inputs.pkg-config-sysroot }}
      run: |
        cargo build \
          --target ${{ inputs.target }} \
          ${{ inputs.build-type == 'release' && '--release' || ''}} \
          ${{ inputs.target-dir && format('--target-dir {}', inputs.target-dir) || ''}}
