name: Build
description: Build the project
inputs:
  always-restore-build-cache:
    description: Always restore the build cache, even if we're not rebuilding
    required: false
  build-type:
    description: The type of build to perform (release or debug)
    required: true
    default: "release"
  pkg-config-sysroot:
    description: The sysroot to use for pkg-config
    required: true
  target:
    description: The target to build for
    required: true
    default: x86_64-unknown-linux-gnu
  target-dir:
    description: The directory to build the project in
    required: true
    default: ""

runs:
  using: "composite"

  steps:
    - name: Restore cache
      id: restore-cache
      uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: |
          target/release/**
          target/*/release/**
        key: >
          build-cargo-${{ runner.os }}-${{ inputs.target }}-${{
          inputs.build-type }}-${{ hashFiles('**/Cargo.lock','**/*.rs') }}

    - name: Set Rust toolchain up
      uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
      with:
        cache: false
        components: rustfmt
        target: ${{ inputs.target }}

    - name: Set Rust cache up
      id: rust-cache
      uses: Swatinem/rust-cache@82a92a6e8fbeee089604da2575dc567ae9ddeaab # v2.7.5
      with:
        # The cache key needs to be customised because we run in multiple matrix
        # jobs and the caches were ending up with the same key. The OS and
        # target vary between jobs, so make it unique again.
        key: ${{ runner.os }}-${{ inputs.target }}

    - name: Install cross toolchain
      id: cross
      if:
        inputs.target == 'aarch64-unknown-linux-gnu' && (
        steps.restore-cache.outputs.cache-hit != 'true' ||
        steps.rust-cache.outputs.cache-hit != 'true' )
      shell: sh
      run: |
        # Set up apt sources for arm64

        # Get arm64 from ports.ubuntu.com
        cat <<EOF | sudo tee /etc/apt/sources.list.d/arm64.sources
        Types: deb
        URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
        Suites: noble noble-updates noble-backports noble-security
        Components: main universe restricted multiverse
        Architectures: arm64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
        EOF

        # And we need to edit the main sources.list so we don't try to get
        # amd64 from archive.ubuntu.com
        sudo sed -i '/^Components:/a Architectures: amd64' /etc/apt/sources.list.d/ubuntu.sources

        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          libssl-dev:arm64

        mkdir .cargo

        cat <<EOF > .cargo/config.toml
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        EOF

    - name: Build
      id: build
      if: steps.cross.conclusion == 'success'
      shell: sh
      env:
        PKG_CONFIG_SYSROOT_DIR: ${{ inputs.pkg-config-sysroot }}
      run: |
        cargo build \
          --target ${{ inputs.target }} \
          ${{ inputs.build-type == 'release' && '--release' || ''}} \
          ${{ inputs.target-dir && format('--target-dir {}', inputs.target-dir) || ''}}

    - name: Save cache
      id: save-cache
      if: steps.build.conclusion == 'success'
      uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: |
          target/release/**
          target/*/release/**
        key: >
          build-cargo-${{ runner.os }}-${{ inputs.target }}-${{
          inputs.build-type }}-${{ hashFiles('**/Cargo.lock','**/*.rs') }}
