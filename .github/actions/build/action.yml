name: Build
description: Build the project
inputs:
  build-type:
    description: The type of build to perform (release or debug)
    required: true
    default: release
  pkg-config-sysroot:
    description: The sysroot to use for pkg-config
    required: true
  target:
    description: The target to build for
    required: true
    default: x86_64-unknown-linux-gnu
  target-dir:
    description: The directory to build the project in
    required: true
    default: ""

runs:
  using: composite

  steps:
    - name: Set Rust toolchain up
      uses: actions-rust-lang/setup-rust-toolchain@9399c7bb15d4c7d47b27263d024f0a4978346ba4 # v1.11.0
      with:
        cache: false
        components: rustfmt
        target: ${{ inputs.target }}

    - name: Set Rust cache up
      id: rust-cache
      uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
      with:
        cache-all-crates: "true"
        cache-targets: "true"
        # The cache key needs to be customised because we run in multiple matrix
        # jobs and the caches were ending up with the same key. The OS and
        # target vary between jobs, so make it unique again.
        key: ${{ runner.os }}
        shared-key: ${{ inputs.build-type }}-${{ inputs.target }}

    - name: Install cross toolchain
      id: cross
      if: inputs.target == 'aarch64-unknown-linux-gnu'
      shell: sh
      run: |
        # Set up apt sources for arm64

        # Get arm64 from ports.ubuntu.com
        cat <<EOF | sudo tee /etc/apt/sources.list.d/arm64.sources
        Types: deb
        URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
        Suites: noble noble-updates noble-backports noble-security
        Components: main universe restricted multiverse
        Architectures: arm64
        Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
        EOF

        # And we need to edit the main sources.list so we don't try to get
        # amd64 from archive.ubuntu.com
        sudo sed -i '/^Components:/a Architectures: amd64' /etc/apt/sources.list.d/ubuntu.sources

        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross \

    - name: Build
      id: build
      if: steps.cross.conclusion == 'success'
      shell: sh
      env:
        PKG_CONFIG_SYSROOT_DIR: ${{ inputs.pkg-config-sysroot }}
      run: |
        cargo build \
          --target ${{ inputs.target }} \
          ${{ inputs.build-type == 'release' && '--release' || ''}} \
          ${{ inputs.target-dir && format('--target-dir {}', inputs.target-dir) || ''}}
